name: Backend CI/CD

on:
  push:
    branches:
      - main
      - dev
    paths:
      - "src/backend/**"

  pull_request:
    branches:
      - main
      - dev
    paths:
      - "src/backend/**"

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.2"
  ALGORITHM: ${{ secrets.ALGORITHM }}
  GEOLOCATION_API_KEY: ${{ secrets.GEOLOCATION_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  build:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-

      - name: Cache packages
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-

      - name: Install poetry
        run: |
          pip install poetry

      - name: Configure poetry
        run: |
          python -m poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          cd src/backend
          poetry install --no-root

      - name: Set API key as environment variable
        run: |
          echo "ALGORITHM=$ALGORITHM" >> $GITHUB_ENV
          echo "GEOLOCATION_API_KEY=$GEOLOCATION_API_KEY" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
          echo "OPENWEATHER_API_KEY=$OPENWEATHER_API_KEY" >> $GITHUB_ENV
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV

      - name: Run tests
        run: |
          cd src/backend
          poetry run pytest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./src/backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api-design-backend:latest
